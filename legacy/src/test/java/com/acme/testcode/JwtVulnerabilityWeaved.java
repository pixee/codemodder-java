package com.acme.testcode;

import io.jsonwebtoken.Claims;
import io.jsonwebtoken.Header;
import io.jsonwebtoken.Jws;
import io.jsonwebtoken.Jwt;
import io.jsonwebtoken.JwtParser;
import io.jsonwebtoken.Jwts;

final class JwtVulnerabilityWeaved {

    void unsafe(String token) {
        Jwt jwt = Jwts.parser().setSigningKey(JWT_PASSWORD).parseClaimsJwt(token);
        System.out.println(jwt.getBody());
        System.out.println(jwt.getHeader());
    }

    void unsafeParameterized(String token) {
        Jwt<Header, Claims> jwt = Jwts.parser().setSigningKey(JWT_PASSWORD).parseClaimsJwt(token);
        System.out.println(jwt.getBody());
        System.out.println(jwt.getHeader());
    }

    void unsafeParameterizedOverMultipleCalls(String token) {
        JwtParser parser = Jwts.parser();
        JwtParser jwtParser = parser.setSigningKey(JWT_PASSWORD);
        Jwt<Header, Claims> jwt = jwtParser.parseClaimsJwt(token);
        System.out.println(jwt.getBody());
    }

    void unsafeButNoFindingForIt(String token) {
        JwtParser parser = Jwts.parser();
        JwtParser jwtParser = parser.setSigningKey(JWT_PASSWORD);
        Jwt<Header, Claims> jwt = jwtParser.parse(token);
        System.out.println(jwt.getBody());
    }

    void avoidChangingOtherJwtCalls(String token) {
        Jws<Claims> jws = Jwts.parser().setSigningKey(JWT_PASSWORD).parseClaimsJws(token);
        Jws<String> jwsFromPlaintext = Jwts.parser().setSigningKey(JWT_PASSWORD).parsePlaintextJws(token);
        Jwt<Header, Claims> alreadySafeJwt = Jwts.parser().setSigningKey(JWT_PASSWORD).parseClaimsJwt(token);
        Jwt unparameterizedAlreadySafeJwt = Jwts.parser().setSigningKey(JWT_PASSWORD).parseClaimsJwt(token);
    }

    private static final String JWT_PASSWORD = "s3cr3t";
}

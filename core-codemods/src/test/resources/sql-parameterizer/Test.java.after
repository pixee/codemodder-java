package com.acme.testcode;

import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Statement;

public final class Test {

  private Connection conn;

  public ResultSet indirectStatement(String input) throws SQLException {
    String sql = "SELECT * FROM USERS WHERE USER = ?";
    PreparedStatement stmt = conn.prepareStatement(sql);
    stmt.setString(1, input);
    return stmt.execute();
  }

  public ResultSet directStatement(String input) throws SQLException {
    String sql = "SELECT * FROM USERS WHERE USER = ?";
    PreparedStatement stmt = conn.prepareStatement(sql);
    stmt.setString(1, input);
    var rs = stmt.execute();
    return rs;
    }

  public ResultSet nameConflict(String input) throws SQLException {
    int stmt = 0;
    String sql = "SELECT * FROM USERS WHERE USER = ?";
    PreparedStatement statement = conn.prepareStatement(sql);
    statement.setString(1, input);
    ResultSet rs = statement.execute();
    stmt++;
    return rs;
    }

  public ResultSet doubleNameConflict(String input) throws SQLException {
    int stmt = 0;
    int statement = 0;
    String sql = "SELECT * FROM USERS WHERE USER = ?";
    PreparedStatement stmt1 = conn.prepareStatement(sql);
    stmt1.setString(1, input);
    ResultSet rs = stmt1.execute();
    stmt = stmt + statement;
    return rs;
    }

  public ResultSet tryResource(String input) throws SQLException {
    String sql = "SELECT * FROM USERS WHERE USER = ?";
    try(PreparedStatement stmt = conn.prepareStatement(sql) ){
        stmt.setString(1, input);
        try (ResultSet rs = stmt.execute()) {
      return rs;
    }
    }
  }

  public ResultSet stringAfterQuote(String input, String input2) throws SQLException {
    String sql = "SELECT * FROM USERS WHERE USER = ? AND PHONE=?";
    PreparedStatement stmt = conn.prepareStatement(sql);
    stmt.setString(1, "user_" + input + "_name");
    stmt.setString(2, input2);
    return stmt.execute();
    }

  public ResultSet referencesAfterExecute(String input) throws SQLException {
    String sql = "SELECT * FROM USERS WHERE USER = ?";
    PreparedStatement stmt = conn.prepareStatement(sql);
    stmt.setString(1, input);
    var rs = stmt.execute();
    System.out.println(sql);
    return rs;
  }

  public ResultSet definiteAssignmentWithEmptyString(String input) throws SQLException {
    String sql = "";
    sql = "SELECT * FROM USERS WHERE USER = ?";
    PreparedStatement stmt = conn.prepareStatement(sql);
    stmt.setString(1, input);
    var rs = stmt.execute();
    return rs;
  }

  public ResultSet singleAssigned(String input) throws SQLException {
    String sql = "SELECT * FROM USERS WHERE USER = ?";
    PreparedStatement stmt = null;
    try {
      stmt = conn.prepareStatement(sql);
      stmt.setString(1, input);
      ResultSet rs = stmt.execute();
      return rs;
    } catch (Exception e) {
    }
  }

}

package com.acme.testcode;

final class Test {

    public boolean fine1 = "foo".equals("bar");
    private boolean fine2 = "foo".equals(bar);
    static boolean cantChange = bar.equals("foo"); // can't change because we don't know the type of bar
    final boolean change2 = getBar().equalsIgnoreCase("foo");

   void foo(String foo, @NotNull String foo1, String nullAssertion) {
       boolean change1 = foo.equals("bar");
       String initializedVar = "init";
       String notSureItIsInitialized = someMethod();
       String notSureItIsInitialized2 = randomVar;
       if(foo.equals("bar")) { // should change
           System.out.println("foo");
       } else if(foo.compareTo("bar") > 0) { // shouldn't change, can't mess with compareTo
           System.out.println("foo");
       } else if("foo".equals(bar)) { // should be fine
           System.out.println("foo");
       } else if(foo1.equals("bar")) { // shouldn't change because foo1 is @NotNull
           System.out.println("foo");
       } else if(initializedVar.equals("init")) { // shouldn't change because initializedVar is initialized
           System.out.println("init");
       }

       if(nullAssertion != null && nullAssertion.equals("anything")){ // shouldn't change because previous null assertion
           System.out.println("null");
       }

       Object obj = new Object();
       if(obj.equals("foo")) { // can't change because the semantics are different
         System.out.println("foo");
       }

       if(outerNullAssertion != null) {
          if(outerNullAssertion.equals("something")) { // shouldn't be changed because already checked in outer block
            System.out.println("outer");
          }
       }

       if(notSureItIsInitialized.equals("1")){ // shouldn't be changed because we can't assume method returns a not null value
          System.out.println("One");
       }

       if(notSureItIsInitialized2.equals("2")){ // shouldn't be changed because we can't assume variable is a not null value
          System.out.println("Two");
       }
   }

   private String getBar() { return null; }
}

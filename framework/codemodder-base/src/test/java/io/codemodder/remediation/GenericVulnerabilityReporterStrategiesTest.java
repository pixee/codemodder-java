package io.codemodder.remediation;

import static org.assertj.core.api.Assertions.assertThat;

import io.codemodder.CodemodChange;
import io.codemodder.CodemodReporterStrategy;
import java.nio.file.Path;
import java.util.stream.Stream;
import org.junit.jupiter.params.ParameterizedTest;
import org.junit.jupiter.params.provider.Arguments;
import org.junit.jupiter.params.provider.MethodSource;

final class GenericVulnerabilityReporterStrategiesTest {

  private static Stream<Arguments> reporters() {
    return Stream.of(
        Arguments.of(GenericVulnerabilityReporterStrategies.xxeReporterStrategy),
        Arguments.of(GenericVulnerabilityReporterStrategies.jndiReporterStrategy),
        Arguments.of(GenericVulnerabilityReporterStrategies.headerInjectionReporterStrategy),
        Arguments.of(GenericVulnerabilityReporterStrategies.reflectionInjectionStrategy),
        Arguments.of(GenericVulnerabilityReporterStrategies.sqlInjectionStrategy));
  }

  @ParameterizedTest
  @MethodSource("reporters")
  void it_can_find_generic_report_elements(final CodemodReporterStrategy reporter) {
    assertThat(reporter.getReferences()).isNotEmpty();
    assertThat(reporter.getDescription()).isNotEmpty();
    assertThat(reporter.getSummary()).isNotEmpty();
    assertThat(reporter.getChange(Path.of("Foo.java"), CodemodChange.from(5))).isNotEmpty();
  }
}

package io.codemodder.plugins.maven.operator;

import java.util.*;
import org.apache.maven.model.Plugin;
import org.apache.maven.model.building.ModelBuildingException;
import org.apache.maven.model.building.ModelBuildingResult;
import org.codehaus.plexus.util.xml.Xpp3Dom;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

/** Queries Version Set in the POM by inspecting the effective pom generated by Embedder */
class UnwrapEffectivePom extends AbstractVersionCommand {

  private static final Logger LOGGER = LoggerFactory.getLogger(UnwrapEffectivePom.class);

  /**
   * Queries the version set in the POM by inspecting the effective POM generated by Embedder.
   *
   * @param pm The ProjectModel containing the configuration and settings for querying the version.
   * @return `true` if the version query is successful, `false` otherwise.
   */
  public boolean execute(ProjectModel pm) {
    try {
      return executeInternal(pm);
    } catch (Exception e) {
      if (e instanceof ModelBuildingException) {
        Ignorable.LOGGER.debug("mbe (you can ignore): ", e);
      } else {
        LOGGER.warn("While trying embedder: ", e);
      }
      return false;
    }
  }

  private boolean executeInternal(ProjectModel pm) throws ModelBuildingException {
    EmbedderFacade.EmbedderFacadeRequest request =
        new EmbedderFacade.EmbedderFacadeRequest(
            pm.isOffline(), null, pm.getPomFile().getFile(), null, null);

    EmbedderFacade.EmbedderFacadeResponse embedderFacadeResponse =
        EmbedderFacade.invokeEmbedder(request);

    Set<VersionDefinition> definedVersions =
        new TreeSet<>(AbstractVersionCommand.VERSION_KIND_COMPARATOR);

    ModelBuildingResult res = embedderFacadeResponse.getModelBuildingResult();

    List<Xpp3Dom> pluginConfigurations = new ArrayList<>();

    for (Plugin plugin : res.getEffectiveModel().getBuild().getPluginManagement().getPlugins()) {
      if ("maven-compiler-plugin".equals(plugin.getArtifactId())) {
        Xpp3Dom configuration = (Xpp3Dom) plugin.getConfiguration();
        if (configuration != null) {
          pluginConfigurations.add(configuration);
        }
      }
    }

    for (Plugin plugin : res.getEffectiveModel().getBuild().getPlugins()) {
      if ("maven-compiler-plugin".equals(plugin.getArtifactId())) {
        Xpp3Dom configuration = (Xpp3Dom) plugin.getConfiguration();
        if (configuration != null) {
          pluginConfigurations.add(configuration);
        }
      }
    }

    for (Xpp3Dom config : pluginConfigurations) {
      for (Map.Entry<String, Kind> entry : AbstractVersionCommand.TYPE_TO_KIND.entrySet()) {
        Xpp3Dom child = config.getChild(entry.getKey());

        if (child != null) {
          definedVersions.add(new VersionDefinition(entry.getValue(), child.getValue()));
        }
      }
    }

    List<VersionDefinition> definedProperties = new ArrayList<>();

    for (Map.Entry<Object, Object> entry : res.getEffectiveModel().getProperties().entrySet()) {
      if (AbstractVersionCommand.PROPERTY_TO_KIND.containsKey(entry.getKey())) {
        Kind kind = AbstractVersionCommand.PROPERTY_TO_KIND.get(entry.getKey());

        definedProperties.add(new VersionDefinition(kind, (String) entry.getValue()));
      }
    }

    definedVersions.addAll(definedProperties);

    result.addAll(definedVersions);

    return !definedVersions.isEmpty();
  }
}

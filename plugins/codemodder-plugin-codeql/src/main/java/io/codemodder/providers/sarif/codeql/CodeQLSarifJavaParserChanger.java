package io.codemodder.providers.sarif.codeql;

import com.contrastsecurity.sarif.Result;
import com.github.javaparser.ast.Node;
import io.codemodder.CodemodReporterStrategy;
import io.codemodder.RegionNodeMatcher;
import io.codemodder.RuleSarif;
import io.codemodder.SarifPluginFixOnlyCodeChanger;
import io.codemodder.SourceCodeRegionExtractor;

/**
 * Provides foundational functionality for modifying Java code using JavaParser based on findings
 * from a SARIF file generated by Semgrep analysis.
 */
public abstract class CodeQLSarifJavaParserChanger<T extends Node>
    extends SarifPluginFixOnlyCodeChanger<T> {

    protected CodeQLSarifJavaParserChanger(RuleSarif sarif, Class<? extends Node> nodeType, RegionNodeMatcher regionNodeMatcher, CodemodReporterStrategy reporterStrategy) {
        super(sarif, nodeType, regionNodeMatcher, reporterStrategy);
    }

    public CodeQLSarifJavaParserChanger(RuleSarif sarif, Class<? extends Node> nodeType, SourceCodeRegionExtractor<Result> regionExtractor, RegionNodeMatcher regionNodeMatcher) {
        super(sarif, nodeType, regionExtractor, regionNodeMatcher);
    }

    public CodeQLSarifJavaParserChanger(RuleSarif sarif, Class<? extends Node> nodeType, SourceCodeRegionExtractor<Result> regionExtractor, RegionNodeMatcher regionNodeMatcher, CodemodReporterStrategy reporter) {
        super(sarif, nodeType, regionExtractor, regionNodeMatcher, reporter);
    }

    public CodeQLSarifJavaParserChanger(RuleSarif sarif, Class<? extends Node> nodeType) {
        super(sarif, nodeType);
    }

    public CodeQLSarifJavaParserChanger(RuleSarif sarif, Class<? extends Node> nodeType, SourceCodeRegionExtractor<Result> regionExtractor) {
        super(sarif, nodeType, regionExtractor);
    }

    public CodeQLSarifJavaParserChanger(RuleSarif sarif, Class<? extends Node> nodeType, CodemodReporterStrategy codemodReporterStrategy) {
        super(sarif, nodeType, codemodReporterStrategy);
    }

    public CodeQLSarifJavaParserChanger(RuleSarif sarif, Class<? extends Node> nodeType, RegionNodeMatcher regionNodeMatcher) {
        super(sarif, nodeType, regionNodeMatcher);
    }

    @Override
  public String vendorName() {
    return "CodeQL";
  }
}

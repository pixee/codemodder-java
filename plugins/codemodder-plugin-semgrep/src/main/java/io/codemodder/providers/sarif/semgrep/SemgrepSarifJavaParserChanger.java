package io.codemodder.providers.sarif.semgrep;

import com.github.javaparser.ast.Node;
import io.codemodder.CodemodReporterStrategy;
import io.codemodder.DefaultFixOnlyCodeChangerInformation;
import io.codemodder.FixOnlyCodeChangerInformation;
import io.codemodder.RegionNodeMatcher;
import io.codemodder.RuleSarif;
import io.codemodder.SarifPluginJavaParserChanger;
import io.codemodder.VendorName;
import io.codemodder.codetf.DetectorRule;
import java.util.Optional;

/**
 * Provides foundational functionality for modifying Java code using JavaParser based on findings
 * from a SARIF file generated by Semgrep analysis.
 */
public abstract class SemgrepSarifJavaParserChanger<T extends Node>
    extends SarifPluginJavaParserChanger<T> {

  private final FixOnlyCodeChangerInformation fixOnlyCodeChangerInformation;

  protected SemgrepSarifJavaParserChanger(
      final RuleSarif sarif,
      final Class<? extends Node> nodeType,
      final RegionNodeMatcher regionNodeMatcher,
      final CodemodReporterStrategy reporterStrategy,
      final DetectorRule detectorRule) {
    super(sarif, nodeType, regionNodeMatcher, reporterStrategy);
    this.fixOnlyCodeChangerInformation =
        new DefaultFixOnlyCodeChangerInformation(VendorName.SEMGREP, detectorRule);
  }

  @Override
  public Optional<FixOnlyCodeChangerInformation> getFixOnlyCodeChangerInformation() {
    return Optional.of(fixOnlyCodeChangerInformation);
  }
}

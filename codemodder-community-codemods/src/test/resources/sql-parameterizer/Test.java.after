package com.acme.testcode;

import java.lang.StringBuilder;
import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Statement;
import java.util.ArrayList;
import java.util.BiFunction;

public final class Test {

  private Connection conn;

  public ResultSet indirectStatement(String input) throws SQLException {
    ArrayList<StringBuilder> parametersl15c12l15c33 = new ArrayList<StringBuilder>();
    for (int il15c12l15c33 = 0; il15c12l15c33 < 1; il15c12l15c33++) {
        parametersl15c12l15c33.add(new StringBuilder());
    }
    BiFunction<Object, Integer, String> addAndReturnEmptyl15c12l15c33 = ( expressionl15c12l15c33,  positionl15c12l15c33) -> {
        parameters.get(positionl15c12l15c33).append(expressionl15c12l15c33 + "");
        return "";
    };
    String sql = "SELECT * FROM USERS WHERE USER = ?" + addAndReturnEmptyl15c12l15c33.apply(input, 0) + "";
    Statement stmt = conn.createStatement();
    stmt.close();
    stmt = stmt.getConnection().prepareStatement(sql);
    for (int il15c12l15c33 = 0; il15c12l15c33 < parametersl15c12l15c33.size(); il15c12l15c33++) {
        ((PreparedStatement) stmt).setString(il15c12l15c33, parametersl15c12l15c33.get(il15c12l15c33 + 1).toString());
    }
    return ((PreparedStatement) stmt).execute();
  }

  public ResultSet directStatement(String input) throws SQLException {
    ArrayList<StringBuilder> parametersl20c14l20c53 = new ArrayList<StringBuilder>();
    for (int il20c14l20c53 = 0; il20c14l20c53 < 1; il20c14l20c53++) {
        parametersl20c14l20c53.add(new StringBuilder());
    }
    BiFunction<Object, Integer, String> addAndReturnEmptyl20c14l20c53 = ( expressionl20c14l20c53,  positionl20c14l20c53) -> {
        parameters.get(positionl20c14l20c53).append(expressionl20c14l20c53 + "");
        return "";
    };
    String sql = "SELECT * FROM USERS WHERE USER = ?" + addAndReturnEmptyl20c14l20c53.apply(input, 0) + "";
    PreparedStatement preparedStatementl20c14l20c53 = conn.prepareStatement(sql);
    for (int il20c14l20c53 = 0; il20c14l20c53 < parametersl20c14l20c53.size(); il20c14l20c53++) {
        preparedStatementl20c14l20c53.setString(il20c14l20c53, parametersl20c14l20c53.get(il20c14l20c53 + 1).toString());
    }
    var rs = preparedStatementl20c14l20c53.execute();
    return rs;
  }

  public ResultSet tryResource(String input) throws SQLException {
    ArrayList<StringBuilder> parametersl26c65l26c86 = new ArrayList<StringBuilder>();
    for (int il26c65l26c86 = 0; il26c65l26c86 < 1; il26c65l26c86++) {
        parametersl26c65l26c86.add(new StringBuilder());
    }
    BiFunction<Object, Integer, String> addAndReturnEmptyl26c65l26c86 = ( expressionl26c65l26c86,  positionl26c65l26c86) -> {
        parameters.get(positionl26c65l26c86).append(expressionl26c65l26c86 + "");
        return "";
    };
    String sql = "SELECT * FROM USERS WHERE USER = ?" + addAndReturnEmptyl26c65l26c86.apply(input, 0) + "";
    try(PreparedStatement stmt = conn.prepareStatement(sql) ){
        for (int il26c65l26c86 = 0; il26c65l26c86 < parametersl26c65l26c86.size(); il26c65l26c86++) {
            stmt.setString(il26c65l26c86, parametersl26c65l26c86.get(il26c65l26c86 + 1).toString());
        }
        try (ResultSet rs = ((PreparedStatement) stmt).execute()) {
      return rs;
    }
    }
  }
}
